====================
simple-contract-bool.ncl
====================

# Example of simple custom contract, parametrized by a first argument.
# In practice, for this kind of simple predicate, one should rather use
# `contract.from_predicate`
let EqualsTo = fun reference_value label value =>
  if reference_value == value then
    value
  else
    contract.blame label in

let AlwaysTrue = EqualsTo true in
let AlwaysFalse = EqualsTo false in

# This contract says: `not` requires its argument to be true, and in return
# promise that the return value is false.
# Try passing `false` to `not`, or to use the identity function (replacing `!x`
# by `x`) to see contract errors appear.
let not | AlwaysTrue -> AlwaysFalse = fun x => !x in
not true

---

(source_expression
  (comment)
  (comment)
  (comment)
  (let
    (bind
      (attrpath
        (attr_identifier))
      (function
        (Id)
        (ERROR
          (Id)
          (Id))
        (Ite
          (BinaryOp
            (Id)
            (Id))
          (Id)
          (App
            (select
              (Id)
              (attrpath
                (attr_identifier)))
            (Id)))))
    (let
      (bind
        (attrpath
          (attr_identifier))
        (App
          (Id)
          (Bool)))
      (let
        (bind
          (attrpath
            (attr_identifier))
          (App
            (Id)
            (Bool)))
        (comment)
        (comment)
        (comment)
        (comment)
        (let
          (ERROR
            (Id)
            (UNEXPECTED ')
            (Id))
          (bind
            (attrpath
              (attr_identifier))
            (function
              (Id)
              (UnaryOp (Id))))
        (App
          (Id)
          (Bool)))))))

====================
simple-contract-div.ncl
====================

# /!\ THIS EXAMPLE IS EXPECTED TO FAIL
# Illustrate a basic contract violation.

let Even = fun label value =>
  if builtin.is_num value && value % 2 == 0 then
    value
  else
    contract.blame label in
let DivBy3 = fun label value =>
  if builtin.is_num value && value % 3 == 0 then
    value
  else
    contract.blame label in
# Will cause an error! 4 is no divided by 3.
(4 | Even
   | DivBy3)

---

(source_expression
  (comment)
  (comment)
  (let
    (bind
      (attrpath
        (attr_identifier))
      (function
        (Id)
        (ERROR
          (Id))
        (Ite
          (BinaryOp
            (App
              (select
                (Id)
                (attrpath
                  (attr_identifier)))
              (Id))
            (BinaryOp
              (App
                (Id)
                (ERROR
                  (UNEXPECTED '))
                (Num))
              (Num)))
          (Id)
          (App
            (select
              (Id)
              (attrpath
                (attr_identifier)))
            (Id)))))
    (let
      (bind
        (attrpath
          (attr_identifier))
        (function
          (Id)
          (ERROR
            (Id))
          (Ite
            (BinaryOp
              (App
                (select
                  (Id)
                  (attrpath
                    (attr_identifier)))
                (Id))
              (BinaryOp
                (App
                  (Id)
                  (ERROR
                    (UNEXPECTED '))
                  (Num))
                (Num)))
            (Id)
            (App
              (select
                (Id)
                (attrpath
                  (attr_identifier)))
              (Id)))))
      (comment)
      (parenthesized
        (App
          (App
            (Num)
            (ERROR
              (UNEXPECTED '))
            (Id))
          (ERROR
            (UNEXPECTED '))
          (Id))))))
