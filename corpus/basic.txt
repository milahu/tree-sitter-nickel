====================
comment
====================

# This is a comment.

"This is a string."

---

(source_expression
  (comment)
  (Str (StrChunk (StrChunkLiteral)))
)

====================
identifier
====================

abc

---

(source_expression (Id))

====================
identifier (enum tag)
====================

`abc

---

(source_expression (IdEnumTag))

====================
identifier (builtin function)
====================

%abc%

---

(source_expression (IdBuiltinFun))

====================
number int
====================

123

---

(source_expression (Num))

====================
number float
====================

123.456

---

(source_expression (Num))

====================
number int negative
====================

-123

---

(source_expression (UnaryOp (Num)))

====================
number float negative
====================

-123.456

---

(source_expression (UnaryOp (Num)))

====================
infix binary operator: plus int int
====================

1 + 2

---

(source_expression (BinaryOp (Num) (Num)))

====================
infix binary operator: plus int int: no space
====================

1+2

---

(source_expression (BinaryOp (Num) (Num)))

====================
infix binary operator: plus int float
====================

1 + 2.3

---

(source_expression (BinaryOp (Num) (Num)))

====================
infix binary operator: minus int int
====================

1 - 2

---

(source_expression (BinaryOp (Num) (Num)))

====================
infix binary operator: minus id id
====================

a - b

---

(source_expression (BinaryOp (Id) (Id)))

====================
infix binary operator: minus int int: no space (FIXME)
====================

1-2

---

(source_expression (BinaryOp (Num) (Num)))

====================
Ite (if then else)
====================

if a then b else c

---

(source_expression (Ite (Id) (Id) (Id)))

====================
let (bind)
====================

let a = b in c

---

(source_expression
  (let
    (bind
      (attrpath (attr_identifier))
      (Id))
    (Id)))

====================
let (bind, comments)
====================

let
  # foo
  a = b
  # bar
in
  # baz
  c

---

(source_expression
  (let
    (comment)
    (bind (attrpath (attr_identifier)) (Id))
    (comment)
    (comment)
    (Id)
  )
)

====================
function
====================

fun a => b

---

(source_expression (function (Id) (Id)))

====================
let RecRecord (empty)
====================

let a = 1 in { }

---

(source_expression
  (let
    (bind (attrpath (attr_identifier)) (Num))
    (RecRecord)
  )
)

====================
select (four ids)
====================

u.v.%{w}."x%{y}z"

---

(source_expression
  (select
    (Id)
    (attrpath
      (attr_identifier)
      (RichTerm (Id))
      (Str
        (StrChunk (StrChunkLiteral))
        (StrChunk (RichTerm (Id)))
        (StrChunk (StrChunkLiteral))
      )
    )
  )
)

====================
apply (multiple functions)
====================

a b 1

---

(source_expression
  (App
    (App
      (Id)
      (Id)
    )
    (Num)
  )
)

====================
apply (multiple arguments)
====================

a 1 "x"

---

(source_expression
  (App
    (App
      (Id)
      (Num)
    )
    (Str (StrChunk (StrChunkLiteral)))
  )
)

====================
let bind apply
====================

let
  y = g f 0
in y

---

(source_expression
  (let
    (bind
      (attrpath (attr_identifier))
      (App
        (App
          (Id)
          (Id)
        )
        (Num)
      )
    )
    (Id)
  )
)

====================
operators
====================

square 2 + -pi - 42.0

---

(source_expression
  (BinaryOp
    (BinaryOp
      (App (Id) (Num))
      (UnaryOp (Id)))
    (Num)))

====================
parens
====================

(123)

---

(source_expression
  (parenthesized (Num)))
