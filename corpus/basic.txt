====================
comments
====================

# This is a comment.

/*
This is also a comment.
*/

"This is a string."

---

(source_expression (comment) (comment) (StrChunks (StrChunk (StrChunkLiteral))))

====================
Id
====================

abc

---

(source_expression (Id))

====================
Num
====================

123

---

(source_expression (Num))

====================
Num
====================

123.456

---

(source_expression (Num))

====================
array (empty)
====================

[ ]

---

(source_expression (array))

====================
array
====================

[ a 1 2.0 ]

---

(source_expression (array (Id) (Num) (Num)))

====================
Ite (if then else)
====================

if a then b else c

---

(source_expression (Ite (Id) (Id) (Id)))

====================
let (bind)
====================

let a = b in c

---

(source_expression
    (let
        (bind
            (attrpath (attr_identifier))
            (Id))
        (Id)))

====================
let (bind, comments)
====================

let
  # foo
  a = b
  # bar
  in
    # baz
    c

---

(source_expression
    (let
        (comment)
        (bind (attrpath (attr_identifier)) (Id))
        (comment)
        (comment)
        (Id)))

====================
function
====================

fun a => b

---

(source_expression (function (Id) (Id)))

====================
let RecRecord (empty)
====================

let a = 1 in { }

---

(source_expression (let (bind (attrpath (attr_identifier)) (Num)) (RecRecord)))

====================
RecRecord (empty)
====================

{ }

---

(source_expression (RecRecord))

====================
RecRecord
====================

{ a = 1, %{b} = "quux", "c" = 3.14, x.y.z = "foo" }

---

(source_expression
    (RecRecord
        (bind (attrpath (attr_identifier)) (Num))
        (bind (attrpath (RichTerm (Id))) (StrChunks (StrChunk (StrChunkLiteral))))
        (bind (attrpath (StrChunks (StrChunk (StrChunkLiteral)))) (Num))
        (bind (attrpath (attr_identifier) (attr_identifier) (attr_identifier)) (StrChunks (StrChunk (StrChunkLiteral)))))))

====================
select
====================

u.v.%{w}."x%{y}z"

---

(source_expression
    (select
        (Id)
        (attrpath
            (attr_identifier)
            (RichTerm (Id))
            (StrChunks (StrChunk (StrChunkLiteral))))))

====================
apply
====================

a b 2.0

---

(source_expression
    (App
        (App
            (Id)
            (Num)
        )
        (Num)
    )
)

====================
apply precedence (TODO)
====================

let
  y = f x
in y

---

(source_expression
    (App
        (App
            (Id)
            (Num)
        )
        (Num)
    )
)

====================
operators
====================

square 2 + -pi - 42.0

---

(source_expression
    (BinaryOp
        (BinaryOp
            (App (Id) (Num))
            (UnaryOp (Id)))
        (Num)))

====================
parens
====================

(123)

---

(source_expression
    (parenthesized (Num)))
