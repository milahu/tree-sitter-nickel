====================
comment
====================

# This is a comment.

"This is a string."

---

(source_expression
  (comment)
  (StrChunks (StrChunk (StrChunkLiteral)))
)

====================
identifier
====================

abc

---

(source_expression (Id))

====================
number int
====================

123

---

(source_expression (Num))

====================
number float
====================

123.456

---

(source_expression (Num))

====================
array (empty)
====================

[ ]

---

(source_expression (Arr))

====================
array (id number number)
====================

[
  a,
  1,
  2.0
]

---

(source_expression
  (Arr
    (Id)
    (Num)
    (Num)
  )
)

====================
array (id number number) (with dangling comma)
====================

[
  a,
  1,
  2.0,
]

---

(source_expression
  (Arr
    (Id)
    (Num)
    (Num)
  )
)

====================
Ite (if then else)
====================

if a then b else c

---

(source_expression (Ite (Id) (Id) (Id)))

====================
let (bind)
====================

let a = b in c

---

(source_expression
  (let
    (bind
      (attrpath (attr_identifier))
      (Id))
    (Id)))

====================
let (bind, comments)
====================

let
  # foo
  a = b
  # bar
in
  # baz
  c

---

(source_expression
  (let
    (comment)
    (bind (attrpath (attr_identifier)) (Id))
    (comment)
    (comment)
    (Id)
  )
)

====================
function
====================

fun a => b

---

(source_expression (function (Id) (Id)))

====================
let RecRecord (empty)
====================

let a = 1 in { }

---

(source_expression
  (let
    (bind (attrpath (attr_identifier)) (Num))
    (RecRecord)
  )
)

====================
RecRecord (empty)
====================

{ }

---

(source_expression (RecRecord))

====================
RecRecord
====================

{
  a = 1,
  %{b} = "quux",
  "c" = 3.14,
  x.y.z = "foo"
}

---

(source_expression
  (RecRecord
    (bind (attrpath (attr_identifier)) (Num))
    (bind (attrpath (RichTerm (Id))) (StrChunks (StrChunk (StrChunkLiteral))))
    (bind (attrpath (StrChunks (StrChunk (StrChunkLiteral)))) (Num))
    (bind (attrpath (attr_identifier) (attr_identifier) (attr_identifier)) (StrChunks (StrChunk (StrChunkLiteral))))
  )
)

====================
RecRecord with dangling comma
====================

{
  a = 1,
  b = 2,
}

---

(source_expression
  (RecRecord
    (bind (attrpath (attr_identifier)) (Num))
    (bind (attrpath (attr_identifier)) (Num))
  )
)

====================
select (four ids)
====================

u.v.%{w}."x%{y}z"

---

(source_expression
  (select
    (Id)
    (attrpath
      (attr_identifier)
      (RichTerm (Id))
      (StrChunks
        (StrChunk (StrChunkLiteral))
        (StrChunk (RichTerm (Id)))
        (StrChunk (StrChunkLiteral))
      )
    )
  )
)

====================
apply (multiple functions)
====================

a b 1

---

(source_expression
  (App
    (App
      (Id)
      (Id)
    )
    (Num)
  )
)

====================
apply (multiple arguments)
====================

a 1 "x"

---

(source_expression
  (App
    (App
      (Id)
      (Num)
    )
    (StrChunks (StrChunk (StrChunkLiteral)))
  )
)

====================
let bind apply
====================

let
  y = g f 0
in y

---

(source_expression
  (let
    (bind
      (attrpath (attr_identifier))
      (App
        (App
          (Id)
          (Id)
        )
        (Num)
      )
    )
    (Id)
  )
)

====================
operators
====================

square 2 + -pi - 42.0

---

(source_expression
  (BinaryOp
    (BinaryOp
      (App (Id) (Num))
      (UnaryOp (Id)))
    (Num)))

====================
parens
====================

(123)

---

(source_expression
  (parenthesized (Num)))

====================
string (simple)
====================

"abc"

---

(source_expression
  (StrChunks (StrChunk (StrChunkLiteral)))
)

====================
string (interpolation)
====================

"a%{b}c"

---

(source_expression
  (StrChunks
    (StrChunk (StrChunkLiteral))
    (StrChunk (RichTerm (Id)))
    (StrChunk (StrChunkLiteral))
  )
)

====================
multistring
====================

m%"abc"%m

---

(source_expression
  (MultiStrChunks
    (MultiStrLiteral)
  )
)

====================
multistring (multiline)
====================

m%"a
b
c"%m

---

(source_expression
  (MultiStrChunks
    (MultiStrLiteral)
  )
)

====================
multistring (indent)
====================

m%"
  a
  b
  c
"%m

---

(source_expression
  (MultiStrChunks
    (MultiStrLiteral)
  )
)

====================
multistring (indent) (interpolation)
====================

m%"
  a
  %{b}
  c
"%m

---

(source_expression
  (MultiStrChunks
    (MultiStrLiteral)
    (RichTerm (Id))
    (MultiStrLiteral)
  )
)
