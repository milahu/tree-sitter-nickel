# nix2nickel

https://nickel-lang.org/user-manual/syntax

https://github.com/tweag/nickel/blob/master/src/parser/lexer.rs

https://github.com/tweag/nickel/blob/master/src/parser/tests.rs

https://github.com/tweag/nickel/tree/master/tests/pass

* minus must be spaced
* floats are supported
* string interpolation is "%{expr}" not "${expr}"
* multi line string is m%"..."%m not ''...''
  * indentation is stripped from the beginning of the first line
  * first and last lines are ignored if they are empty or contain only spaces.
  * multiline string can be introduced and closed by multiple % signs, as long as this amount is equal
    * If you want to use string interpolation, you must use the same amount of % as in the delimiters.
    * example: m%%"Hello %%{w}"%%m
* strings are fixed strings. \n etc are not special
* enum tag = backtick ` followed by any valid identifier
  * examples: `Json `Toml `Yaml
* array items are delimited by , [similar to json]
* array concat is @ not ++
* attrset is called a "record"
  * record items are delimited by , [similar to json]
  * assignment: field = value [like nix]
  * The fields are strings, but can be written without quotes " if they respect identifiers syntax [like nix]
    * "possible to write records of records via the piecewise syntax" [like nix]
      * { a = { b = 1 } } == { a.b = 1 }
  * record concat is & not //
    * "Two records can be merged together using the operator &"
  * "Accessing a record field can be done using the . operator" [like nix] [nix: select operator]
  * "When fields are enclosed with double quotes ("), you can use string interpolation to create or access fields" [like nix]
* if-then-else like in nix
* let as in nix: let <ident> = <expr> in <expr>
  * also multiple bindings? (like in nix) (separated by , ?)
* function
  * declared using the fun keyword
    * then arguments separated with spaces
    * finally a fat arrow => to add the body of the function
  * call: "To call a function, just add the arguments after it separated with spaces" [like in nix]
    * "Functions in Nickel are curried" [like in nix]
  * "All existing infix operators in Nickel can be turned into functions by putting them inside parentheses."
    * 1 + 2 == (+) 1 2
    * [1] @ [2] == (@) [1] [2]
    * {a=1} & {b=2} == (&) {a=1} {b=2}
  * Functions might be composed using the pipe operator
    * The pipe operator allows for a function application f x to be written as x |> f
    * This operator is left-associative, so x |> f |> g will be interpreted as g (f x).
    * "Hello World" |> string.split " " == string.split " " "Hello World"
* Typing
  * To give a type to a value, we write it with <value> : <type>
  * 5 : Num
  * "Hello" : Str
  * (fun a b => a + b) : Num -> Num -> Num
  * let add : Num -> Num -> Num = fun a b => a + b
  * let r : { _ : Num } = { a = 1, b = 2 }
    * _ is wildcard field? -> default type for all fields

* Metadata
  * Metadata are used to attach contracts, documentation or priority to values
  * A metadata is introduced with the syntax <value> | <metadata>
    * 5 | Num == 5
    * 5 | Bool == error
    * 5 | doc "The number five" == 5
  * Multiple metadata can be chained
    * true | Bool | doc "..." == true
  * Record contracts can set default values using the default metadata: It is noted as: | default = <default_value>
  * {} | { a | default = 2 } == { a = 2 }
